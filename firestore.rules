rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    function hasOnlyKeys(allowed) {
      return request.resource.data.keys().hasOnly(allowed);
    }
    function hasAllKeys(required) {
      return request.resource.data.keys().hasAll(required);
    }
    // bookings written by CF; users can read and delete their own; admins full control
  match /bookings/{bookingId} {
  allow read: if request.auth != null;
  allow create: if false;            // only CF
  allow delete: if request.auth != null
               && (resource.data.uid == request.auth.uid || isAdmin());
  allow update: if false;            // or let admin update if you want
}

    // ========== USERS ==========
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update, delete: if isOwner(userId) && usersSchemaOK();

      function usersSchemaOK() {
        return (
          hasOnlyKeys([
            'email','username','firstName','lastName','age','location','gender',
            'reason','role','createdAt','updatedAt','provider'
          ]) || true
        )
        && (!('email' in request.resource.data)     || request.resource.data.email is string)
        && (!('username' in request.resource.data)  || request.resource.data.username is string)
        && (!('firstName' in request.resource.data) || request.resource.data.firstName is string)
        && (!('lastName' in request.resource.data)  || request.resource.data.lastName is string)
        && (!('age' in request.resource.data)       || request.resource.data.age is int)
        && (!('location' in request.resource.data)  || request.resource.data.location is string)
        && (!('gender' in request.resource.data)    || request.resource.data.gender is string)
        && (!('reason' in request.resource.data)    || request.resource.data.reason is string)
        && (!('role' in request.resource.data)      || request.resource.data.role is string)
        && (!('provider' in request.resource.data)  || request.resource.data.provider is string);
      }
    }

    // ========== PROGRAMS ==========
    match /programs/{programId} {
      allow read: if true;
      allow create, update, delete: if isAdmin() && programsSchemaOK();

      function programsSchemaOK() {
        return hasAllKeys(['title','type','days','address'])
          && (hasOnlyKeys([
              'title','type','days','address','suburb','lat','lng',
              'price','capacity','description','createdAt','updatedAt','active'
            ]) || true)
          && (request.resource.data.title is string)
          && (request.resource.data.type is string)
          && (request.resource.data.days is list)
          && (request.resource.data.address is string)
          && (!('suburb' in request.resource.data)    || request.resource.data.suburb is string)
          && (!('lat' in request.resource.data)       || request.resource.data.lat is float || request.resource.data.lat is int)
          && (!('lng' in request.resource.data)       || request.resource.data.lng is float || request.resource.data.lng is int)
          && (!('price' in request.resource.data)     || request.resource.data.price is float || request.resource.data.price is int)
          && (!('capacity' in request.resource.data)  || request.resource.data.capacity is int)
          && (!('active' in request.resource.data)    || request.resource.data.active is bool);
      }
    }

    // ========== ENROLMENTS ==========
    match /enrolments/{enrolId} {
      allow read: if isAdmin() || (isSignedIn() && resource.data.uid == request.auth.uid);
      allow create: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && enrolSchemaOK();
      allow update, delete: if isSignedIn()
        && resource.data.uid == request.auth.uid
        && enrolSchemaOK();

      function enrolSchemaOK() {
        return (hasOnlyKeys(['uid','programId','status','createdAt','notes']) || true)
          && (request.resource.data.uid is string)
          && (request.resource.data.programId is string)
          && (!('status' in request.resource.data) || request.resource.data.status is string);
      }
    }

    // ========== BOOKINGS ==========
    // We create bookings via Cloud Function (Admin SDK bypasses rules).
    match /bookings/{bookingId} {
      // Anyone signed-in can read their own; admins can read all.
      allow read: if isSignedIn() && (resource.data.uid == request.auth.uid || isAdmin());

      // Disallow direct client creates; CF writes them.
      allow create: if false;

      // Allow owner or admin to update/delete (e.g., cancel).
      allow update, delete: if isSignedIn() && (resource.data.uid == request.auth.uid || isAdmin());
      // If you ever want to accept client creates instead, flip create=true and enforce:
      // && bookingSchemaOK()
    }

    // Optional schema (used only if you ever enable client-side creates)
    function bookingSchemaOK() {
      return (hasOnlyKeys(['uid','programId','start','end','status','createdAt']) || true)
        && (request.resource.data.uid is string)
        && (request.resource.data.programId is string)
        && (request.resource.data.start is string)
        && (request.resource.data.end is string)
        && (!('status' in request.resource.data) || request.resource.data.status is string);
    }

    // ========== RATINGS (scores) ==========
    match /ratings/{itemKey}/scores/{userId} {
      allow read: if true;
      allow create, update, delete: if isOwner(userId) && isValidScore();

      function isValidScore() {
        return hasOnlyKeys(['score','at'])
          && request.resource.data.score is int
          && request.resource.data.score >= 1
          && request.resource.data.score <= 5
          && request.resource.data.at is string;
      }
    }

    // ========== RATINGS (reviews) ==========
    match /ratings/{itemKey}/reviews/{userId} {
      allow read: if true;
      allow create, update, delete: if isOwner(userId) && isValidReview();

      function isValidReview() {
        return hasOnlyKeys(['score','comment','at'])
          && request.resource.data.score is int
          && request.resource.data.score >= 1
          && request.resource.data.score <= 5
          && request.resource.data.comment is string
          && request.resource.data.comment.size() >= 5
          && request.resource.data.comment.size() <= 500
          && request.resource.data.at is string;
      }
    }

    // Optional aggregates written by CF
    match /ratingsMeta/{itemKey} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ========== EMAIL QUEUE (optional) ==========
    match /emails/{emailId} {
      allow read, write: if isAdmin() && emailSchemaOK();

      function emailSchemaOK() {
        return (hasOnlyKeys(['to','subject','body','attachments','status','createdAt','sentAt','error']) || true)
          && (request.resource.data.to is list)
          && (request.resource.data.subject is string)
          && (request.resource.data.body is string)
          && (!('attachments' in request.resource.data) || request.resource.data.attachments is list)
          && (!('status' in request.resource.data) || request.resource.data.status is string);
      }
    }

    // ========== ANALYTICS (admin writes) ==========
    match /analytics/{collection}/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // ========== GEO FAVS ==========
    match /geofavs/{uid}/clubs/{clubId} {
      allow read, write: if isOwner(uid) && geofavSchemaOK();

      function geofavSchemaOK() {
        return (hasOnlyKeys(['name','lat','lng','addedAt','sport']) || true)
          && (request.resource.data.name is string)
          && (request.resource.data.lat is float || request.resource.data.lat is int)
          && (request.resource.data.lng is float || request.resource.data.lng is int);
      }
    }
  }
}
